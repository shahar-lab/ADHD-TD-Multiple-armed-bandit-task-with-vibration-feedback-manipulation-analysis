#######filter ----------------------
mean(df$abort)
print('we then ommited 4% of trials due to fast/slow rts or first trial in the block')
df=df%>%filter(abort==0)
df<-na.omit(df)
df= df %>% mutate(reoffer_unchosen_oneback = (lag(unchosen_card) == left_offer | lag(unchosen_card) ==right_offer),
stay_unchosen = lag(unchosen_card) == choice_card)
save(df, file='G:/My Drive/Xbox/data/empirical_data/df.rdata')
rm(list=ls())
source('./functions/my_packages.R')
load('G:/My Drive/Xbox/data/empirical_data/df.rdata')
model<-glmer(stay~ reward_oneback*condition_oneback +(reward_oneback*condition_oneback| subject),
data = df,
family = binomial,
control = glmerControl(optimizer = "bobyqa"), nAGQ = 1)
plot(effect('reward_oneback',model))
plot(effect('condition_oneback',model))
plot(effect('reward_oneback:condition_oneback',model,xlevels=2))
sammry(model)
summary(model)
plot(effect('condition_oneback:reward_oneback',model,xlevels=2))
plot(effect('condition_oneback:reward_oneback',model,xlevels=2))
reward_oneback:
plot(effect('condition_oneback',model))
plot(effect('reward_oneback:condition_oneback',model,xlevels=2))
plot(effect('reward_oneback',model))
plot(effect('condition_oneback',model))
plot(effect('reward_oneback:condition_oneback',model,xlevels=2))
plot(effect('condition_oneback:reward_oneback',model,xlevels=2))
summary(model)
Anova(model)
anova(model)
plot(effect('condition_oneback',model))
plot(effect('condition_oneback:reward_oneback',model,xlevels=3))
View(df)
rm(list=ls())
df<- read.csv('G:/My Drive/Xbox/data/empirical_data/df_raw.csv')
df <- as.data.frame(df)
library(dplyr)
df <-df %>% filter(block_type==' test')
df= df %>% mutate(stay = (choice_card == lag(choice_card))*1,
reward_oneback = lag(reward),
reoffer_chosen_oneback = (lag(choice_card) == left_offer | lag(choice_card) ==right_offer),
# accuracy = (exp_value_chosen > exp_value_unchosen)*1,
stay_key = (choice_key == lag(choice_key))*1,
# delta_exp_value = abs(exp_value_chosen - exp_value_unchosen),
condition_oneback =lag(condition),
)
df= df %>% mutate(abort = ( rt < 0.2 | rt > 4 | is.na(rt) | trial ==1 ))
df%>%
group_by(subject)%>%
summarise(p.stay=mean(stay_key))%>%
with(plot(p.stay,ylim=c(0,1)))
print('no subjects were ommited, all had pstay_key<0.9')
p.abort=df%>%group_by(subject)%>%summarise(p.abort=mean(abort))%>%mutate(above_threshold=(p.abort>.25))
sum(p.abort$above_threshold)
subj.list=p.abort$subject[p.abort$above_threshold==0]
df=df%>%filter(subject%in%subj.list)
print('we ommited 0 participants since they had more then 25% trial ommited due to fast/slow RTs')
mean(df$abort)
print('we then ommited 4% of trials due to fast/slow rts or first trial in the block')
df=df%>%filter(abort==0)
df<-na.omit(df)
df= df %>% mutate(reoffer_unchosen_oneback = (lag(unchosen_card) == left_offer | lag(unchosen_card) ==right_offer),
stay_unchosen = lag(unchosen_card) == choice_card)
save(df, file='G:/My Drive/Xbox/data/empirical_data/df.rdata')
rm(list=ls())
source('./functions/my_packages.R')
load('G:/My Drive/Xbox/data/empirical_data/df.rdata')
model<-glmer(stay~ reward_oneback*condition_oneback +(reward_oneback*condition_oneback| subject),
data = df,
family = binomial,
control = glmerControl(optimizer = "bobyqa"), nAGQ = 1)
plot(effect('reward_oneback',model))
plot(effect('condition_oneback',model))
plot(effect('reward_oneback:condition_oneback',model,xlevels=2))
summary(model)
anova(model)
rm(list=ls())
#source('./functions/my_packages.R')
load('./data/empirical_data/df.rdata')
# Load libraries:
library(ggplot2)
library(effects)
library(brms)
library(rstan)
library(bayestestR)
library(cmdstanr)
df$condition = relevel(df$condition, ref = 'off')
contrasts(df$condition)
df$group = relevel(df$group, ref = 'td')
contrasts(df$group)
accuracy_model4<-brm(accuracy ~ block_phase*condition*group +(block_phase*condition| subject),
data = df ,
#family = bernoulli,
warmup = 2000,
iter = 3000,
cores =4,
chains=4,
backend='cmdstan')
# View results:
conditional_effects(accuracy_model4)
describe_posterior(accuracy_model4)
conditions <- make_conditions(accuracy_model4, "condition")
conditional_effects(accuracy_model4, "block_phase:group", conditions = conditions)
time_model1<-brm(rt ~ delta_exp_value*condition*group +(delta_exp_value*condition| subject),
data = df,
family = exgaussian,
warmup = 500,
iter = 700,
cores =4,
chains=4,
backend='cmdstan')
hist(df$rt)
hist(df$rt[df$group=='adhd'])
hist(df$rt[df$group=='td'])
hist(df$rt[df$group=='adhd'])
hist(df$rt[df$group=='adhd'])
hist(df$rt[df$group=='td'])
conditions <- make_conditions(time_model1, "condition")
conditional_effects(time_model1, "delta_exp_value:group", conditions = conditions)
time_model1<-brm(rt ~ delta_exp_value*condition*group +(delta_exp_value*condition| subject),
data = df|>filter(block_phase=='second_half'),
family = exgaussian,
warmup = 500,
iter = 700,
cores =4,
chains=4,
backend='cmdstan')
time_model1<-brm(rt ~ delta_exp_value*condition*group +(delta_exp_value*condition| subject),
data = df|>filter(block_phase=='second_half'),
family = exgaussian,
warmup = 500,
iter = 700,
cores =4,
chains=4,
backend='cmdstan')
rm(list=ls())
#source('./functions/my_packages.R')
load('./data/empirical_data/df.rdata')
# Load libraries:
library(dplyr)
library(ggplot2)
library(effects)
library(brms)
library(rstan)
library(bayestestR)
library(cmdstanr)
df$condition = relevel(df$condition, ref = 'off')
contrasts(df$condition)
df$group = relevel(df$group, ref = 'td')
contrasts(df$group)
time_model1<-brm(rt ~ delta_exp_value*condition*group +(delta_exp_value*condition| subject),
data = df|>filter(block_phase=='second_half'),
family = exgaussian,
warmup = 500,
iter = 700,
cores =4,
chains=4,
backend='cmdstan')
conditions <- make_conditions(time_model1, "condition")
conditional_effects(time_model1, "delta_exp_value:group", conditions = conditions)
describe_posterior(time_model1)
time_model1<-brm(rt ~ delta_exp_value*condition*group +(delta_exp_value*condition| subject),
data = df|>filter(block_phase=='second_half'),
family = exgaussian,
warmup = 2000,
iter = 3000,
cores =4,
chains=4,
backend='cmdstan')
describe_posterior(time_model1)
conditions <- make_conditions(time_model1, "condition")
conditional_effects(time_model1, "delta_exp_value:group", conditions = conditions)
accuracy_model4<-brm(accuracy ~ block_phase*condition*group +(block_phase*condition| subject),
data = df ,
#family = bernoulli,
warmup = 2000,
iter = 3000,
cores =4,
chains=4,
backend='cmdstan')
conditions <- make_conditions(accuracy_model4, "condition")
conditional_effects(accuracy_model4, "block_phase:group", conditions = conditions)
describe_posterior(accuracy_model4)
accuracy_model4<-brm(accuracy ~ block_phase*condition*group +(block_phase*condition| subject),
data = df ,
#family = bernoulli,
warmup = 2000,
iter = 3000,
cores =4,
chains=4,
hdi(ci = 0.89),
backend='cmdstan')
accuracy_model4<-brm(accuracy ~ block_phase*condition*group +(block_phase*condition| subject),
data = df ,
#family = bernoulli,
warmup = 2000,
iter = 3000,
cores =4,
chains=4,
hdi(x, ci = 0.89),
backend='cmdstan')
accuracy_model4<-brm(accuracy ~ block_phase*condition*group +(block_phase*condition| subject),
data = df ,
#family = bernoulli,
warmup = 2000,
iter = 3000,
cores =4,
chains=4,
hdi(x, ci = 0.89, verbose = verbose),
backend='cmdstan')
accuracy_model4<-brm(accuracy ~ block_phase*condition*group +(block_phase*condition| subject),
data = df ,
#family = bernoulli,
warmup = 2000,
iter = 3000,
cores =4,
chains=4,
hdi(posterior, ci = 0.89),
backend='cmdstan')
accuracy_model4<-brm(accuracy ~ block_phase*condition*group +(block_phase*condition| subject),
data = df ,
#family = bernoulli,
warmup = 2000,
iter = 3000,
cores =4,
chains=4,
posterior <- rnorm(1000),
hdi(posterior, ci = 0.89),
backend='cmdstan')
bayestestR::describe_posterior(accuracy_model4, ci=(.89))
time_model1<-brm(rt ~ delta_exp_value*condition*group +(delta_exp_value*condition| subject),
data = df|>filter(block_phase=='second_half'),
family = exgaussian,
warmup = 2000,
iter = 3000,
cores =4,
chains=4,
backend='cmdstan')
bayestestR::describe_posterior(accuracy_model4, ci=(.89))
# View results:
conditional_effects(accuracy_model4)
conditions <- make_conditions(accuracy_model4, "condition")
conditional_effects(accuracy_model4, "block_phase:group", conditions = conditions)
conditional_effects(time_model1, "delta_exp_value:group", conditions = conditions)
bayestestR::describe_posterior(time_model1, ci=(.89))
conditions <- make_conditions(time_model1, "condition")
conditional_effects(time_model1, "delta_exp_value:group", conditions = conditions)
bayestestR::describe_posterior(time_model1, ci=(.89))
View(df)
conditional_effects(time_model1)
warmup = 2000,
stay_model2<-brm(stay ~ reward_oneback*condition*group +(reward_oneback*condition| subject),
data = df,
#family = bernoulli,
warmup = 2000,
iter = 3000,
cores = 4,
chains = 4,
backend='cmdstan')
conditions <- make_conditions(stay_model2, "condition")
conditional_effects(stay_model2, "reward_oneback:group", conditions = conditions)
#describe_posterior(stay_model2)
bayestestR::describe_posterior(stay_model2, ci=(.89))
bayestestR::describe_posterior(accuracy_model4, ci=(.89))
bayestestR::describe_posterior(accuracy_model4, ci=(.89))
# View results:
conditional_effects(accuracy_model4)
control = glmerControl(optimizer = "bobyqa"), nAGQ = 0)
stay_model3<-glmer(stay_key~ reward_oneback*condition_oneback*group +(1|subject),
data = df,
family = binomial,
control = glmerControl(optimizer = "bobyqa"), nAGQ = 0)
# Load libraries:
library(dplyr)
library(ggplot2)
library(effects)
library(brms)
library(rstan)
library(bayestestR)
library(cmdstanr)
stay_model3<-glmer(stay_key~ reward_oneback*condition_oneback*group +(1|subject),
data = df,
family = binomial,
control = glmerControl(optimizer = "bobyqa"), nAGQ = 0)
# Organize data:
df$condition = relevel(df$condition, ref = 'off')
contrasts(df$condition)
df$group = relevel(df$group, ref = 'td')
contrasts(df$group)
stay_model1<-glmer(stay~ reward_oneback*condition_oneback*group +(1|subject),
data = df,
family = binomial,
control = glmerControl(optimizer = "bobyqa"), nAGQ = 0)
# Load libraries:
library(dplyr)
library(ggplot2)
library(effects)
library(brms)
library(rstan)
library(bayestestR)
library(cmdstanr)
stay_model3<-glmer(stay_key~ reward_oneback*condition_oneback*group +(1|subject),
data = df,
family = binomial,
control = glmerControl(optimizer = "bobyqa"), nAGQ = 0)
install.packages(lme4)
install.packages('lme4')
install.packages("lme4")
library(lme4)
# View stay results:
df =
df |>
group_by(reward_oneback,condition_oneback,group) |>
summarise(st = mean(stay))
rm(list=ls())
#source('./functions/my_packages.R')
load('./data/empirical_data/df.rdata')
# Load libraries:
library(dplyr)
library(ggplot2)
library(effects)
library(brms)
library(rstan)
library(bayestestR)
library(cmdstanr)
library(lme4)
stay_model3<-glmer(stay_key~ reward_oneback*condition_oneback*group +(1|subject),
data = df,
family = binomial,
control = glmerControl(optimizer = "bobyqa"), nAGQ = 0)
plot(effect('reward_oneback',stay_model3))
summary(stay_model1)
summary(stay_model3)
anova(stay_model3)
plot(effect('condition_oneback',stay_model3))
plot(effect('group',stay_model3))
plot(effect('reward_oneback:condition_oneback:group',stay_model3,xlevels=2))
# Organize data:
df$condition = relevel(df$condition, ref = 'off')
contrasts(df$condition)
df$group = relevel(df$group, ref = 'td')
contrasts(df$group)
plot(effect('reward_oneback:condition_oneback:group',stay_model3,xlevels=2))
stay_model3<-glmer(stay_key~ reward_oneback*condition_oneback*group +(1|subject),
data = df,
family = binomial,
control = glmerControl(optimizer = "bobyqa"), nAGQ = 0)
plot(effect('reward_oneback',stay_model3))
anova(stay_model3)
plot(effect('condition_oneback',stay_model3))
plot(effect('group',stay_model3))
plot(effect('reward_oneback:condition_oneback:group',stay_model3,xlevels=2))
time_model1<-brm(rt ~ delta_exp_value*condition*group +(delta_exp_value*condition| subject),
data = df|>filter(block_phase=='second_half'),
family = exgaussian,
warmup = 2000,
iter = 3000,
cores = 4,
chains = 4,
backend='cmdstan')
bayestestR::describe_posterior(time_model1, ci=(.89))
stay_model2<-brm(stay ~ reward_oneback*condition*group +(reward_oneback*condition| subject),
data = df,
#family = bernoulli,
warmup = 2000,
iter = 3000,
cores = 4,
chains = 4,
backend='cmdstan')
#describe_posterior(stay_model2)
bayestestR::describe_posterior(stay_model2, ci=(.89))
conditional_effects(stay_model2)
conditions <- make_conditions(stay_model2, "condition")
conditional_effects(stay_model2, "reward_oneback:group", conditions = conditions)
plot(effect('reward_oneback',stay_model3))
anova(stay_model3)
plot(effect('condition_oneback',stay_model3))
plot(effect('group',stay_model3))
plot(effect('condition_oneback',stay_model3))
plot(effect('reward_oneback:condition_oneback:group',stay_model3,xlevels=2))
plot(effect('reward_oneback',stay_model3))
plot(effect('condition_oneback',stay_model3))
plot(effect('group',stay_model3))
plot(effect('reward_oneback:condition_oneback:group',stay_model3,xlevels=2))
plot(effect('reward_oneback:condition_oneback',stay_model3))
# Stay key model1 - irrelevant learning
stay_model4<-brm(stay ~ reward_oneback*condition*group +(reward_oneback*condition| subject),
data = df,
#family = bernoulli,
warmup = 2000,
iter = 3000,
cores = 4,
chains = 4,
backend='cmdstan')
#describe_posterior(stay_model4)
bayestestR::describe_posterior(stay_model4, ci=(.89))
conditional_effects(stay_model4)
conditions <- make_conditions(stay_model4, "condition")
conditional_effects(stay_model4, "reward_oneback:group", conditions = conditions)
# Load libraries:
library(ggplot2)
library(effects)
library(brms)
library(rstan)
library(bayestestR)
library(cmdstanr)
library(lme4)
library(emmeans)
df$condition = relevel(df$condition, ref = 'off')
contrasts(df$condition)
df$group = relevel(df$group, ref = 'td')
contrasts(df$group)
rm(list=ls())
#source('./functions/my_packages.R')
load('./data/empirical_data/df.rdata')
# Load libraries:
library(ggplot2)
library(effects)
library(brms)
library(rstan)
library(bayestestR)
library(cmdstanr)
library(lme4)
library(emmeans)
df$condition = relevel(df$condition, ref = 'off')
contrasts(df$condition)
df$group = relevel(df$group, ref = 'td')
contrasts(df$group)
accuracy_model10<-brm(accuracy ~ trial*condition*group +(delta_exp_value*condition| subject),
data = df|>filter(trial == 1|trial==2|trial==3|trial==4|trial==5|trial==6|trial==7|trial==8|trial==9|trial==10),
#family = bernoulli,
warmup = 2000,
iter = 3000,
cores = 4,
chains = 4,
backend='cmdstan')
View(df)
accuracy_model9<-brm(accuracy ~ trial*condition*group +(delta_exp_value*condition| subject),
data = df|>filter(trial == 1|trial==2|trial==3|trial==4|trial==5),
#family = bernoulli,
warmup = 2000,
iter = 3000,
cores = 4,
chains = 4,
backend='cmdstan')
rm(list=ls())
#source('./functions/my_packages.R')
load('./data/empirical_data/df.rdata')
# Load libraries:
library(ggplot2)
library(effects)
library(brms)
library(rstan)
library(bayestestR)
library(cmdstanr)
library(lme4)
library(emmeans)
df$condition = relevel(df$condition, ref = 'off')
contrasts(df$condition)
df$group = relevel(df$group, ref = 'td')
contrasts(df$group)
accuracy_model8<-brm(accuracy ~ delta_exp_value*condition*group +(delta_exp_value*condition| subject),
data = df ,
#family = bernoulli,
warmup = 2000,
iter = 3000,
cores = 4,
chains = 4,
backend='cmdstan')
accuracy_model10<-brm(accuracy ~ trial*condition*group +(delta_exp_value*condition| subject),
data = df|>filter(trial == 1|trial==2|trial==3|trial==4|trial==5|trial==6|trial==7|trial==8|trial==9|trial==10),
#family = bernoulli,
warmup = 2000,
iter = 3000,
cores = 4,
chains = 4,
backend='cmdstan')
View(df)
View(df)
accuracy_model9<-brm(accuracy ~ trial*condition*group +(delta_exp_value*condition| subject),
data = df|>filter(trial == 1|trial==2|trial==3|trial==4|trial==5),
#family = bernoulli,
warmup = 2000,
iter = 3000,
cores = 4,
chains = 4,
backend='cmdstan')
accuracy_model10<-brm(accuracy ~ trial*condition*group +(delta_exp_value*condition| subject),
data = df|>filter(trial==1|trial==2|trial==3|trial==4|trial==5|trial==6|trial==7|trial==8|trial==9|trial==10),
#family = bernoulli,
warmup = 2000,
iter = 3000,
cores = 4,
chains = 4,
backend='cmdstan')
df$trial[1]
View(df)
accuracy_model9<-brm(accuracy ~ trial*condition*group +(delta_exp_value*condition| subject),
data = df|>filter(trial==1|trial==2|trial==3|trial==4|trial==5),
#family = bernoulli,
warmup = 2000,
iter = 3000,
cores = 4,
chains = 4,
backend='cmdstan')
data = df|>filter(trial==1|trial==2|trial==3|trial==4|trial==5)
data = df|>filter(trial==1)
data = df|>filter(trial[1])
data = df|>filter(trial[1])
data = df|>filter(trial==1|trial==2|trial==3|trial==4|trial==5)
